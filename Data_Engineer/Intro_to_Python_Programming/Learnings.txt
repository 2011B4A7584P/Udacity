* Python is case-sensitive
* Spacing matters in python
* Use error messages to help you learn

Data Types and Operators
------------------------

Data Types: Integers, Floats, Booleans, Strings


Operators: Arithmetic, Assignment, Comparison, Logical

Arithmetic operators

+ Addition
- Subtraction
* Multiplication
/ Division
% Mod (the remainder after dividing)
** Exponentiation (note that ^ does not do this operation, as you might have 
   seen in other languages)
// Integer division : Divides and rounds down to the nearest integer

Bitwise operators are special operators in Python
Link to Bitwise operators : https://wiki.python.org/moin/BitwiseOperators


Besides writing variable names that are descriptive, there are a few things to 
watch out for when naming variables in Python.

1. Only use ordinary letters, numbers and underscores in your variable names. 
They can’t have spaces, and need to start with a letter or underscore.

2. You can’t use Python's reserved words, or "keywords," as variable names.
There are reserved words in every programming language that have important purposes.
Creating names that are descriptive of the values often will help you 
avoid using any of these keywords.

Keywords
The following identifiers are used as reserved words, or 
keywords of the language, and cannot be used as ordinary identifiers. 
They must be spelled exactly as written here:

False      await      else       import     pass
None       break      except     in         raise
True       class      finally    is         return
and        continue   for        lambda     try
as         def        from       nonlocal   while
assert     del        global     not        with
async      elif       if         or         yield


3. The pythonic way to name variables is to use all lowercase letters and 
underscores to separate words.


YES
my_height = 58
my_lat = 40
my_long = 105

NO
my height = 58
MYLONG = 40
MyLat = 105

Though the last two of these would work in python, they are not pythonic ways 
to name variables. The way we name variables is called snake case, because we
tend to connect the words with underscores.

Assignment Operators:

SYMBOL			EXAMPLE			EQUIVALENT
=				 x = 2			    x = 2
+=				 x += 2				x = x + 2
-=				 x -= 2             x = x - 2
*=				 x *= 2				x = x * 2
/=				 x /= 2				x = x / 2
**=				 x **= 2			x = x ** 2 (exponentiation)
//=				 x //= 2			x = x // 2 (floor division to nearest integer left on number line)
%=				 x %= 2				x = x % 2 (remainder)

4.445e8 is equal to 4.445 * 10 ** 8 which is equal to 444500000.0

You can check the type by using the type function

type(x)

Because the float, or approximation, for 0.1 is actually slightly more than 0.1,
when we add several of them together we can see the difference between the 
mathematically correct answer and the one that Python creates.
>>> print(.1 + .1 + .1 == .3)
False

In general, there are two types of errors to look out for

Exceptions
Syntax

An Exception is a problem that occurs when the code is running, but a 'Syntax Error'
is a problem detected when Python checks the code before it runs it.

Strings : + operator concatenates the strings whereas * repeats the string
Unlike the other data types you have seen so far, you can also index into strings.
>>> first_word = 'Hello'
>>> first_word[0]
H

The len() function
len() is a built-in Python function that returns the length of an object, 
like a string. The length of a string is the number of characters in the
string. This will always be an integer.

What does the len function return when we give 
it the integer 835 instead of a string? An Error

Nice! The error message generated reads: TypeError: object of type 'int' has no 
len(), which alludes to the fact that len only works on a "sequence (such as a 
string, bytes, tuple, list, or range) or a collection (such as a dictionary, set,
or frozen set)," as per the Python documentation.

Methods are functions that belong to an object of specific type.

Methods are like some of the functions you have already seen:

len("this")
type(12)
print("Hello world")
These three above are functions - notice they use parentheses, and accept one or 
more arguments. 

A method in Python behaves similarly to a function. Methods actually are 
functions that are called using dot notation. For example, lower() is a 
string method that can be used like this, on a string called "sample string": 
sample_string.lower()

Methods are specific to the data type for a particular variable. So there are 
some built-in methods that are available for all strings, different methods 
that are available for all integers, etc.

One important string method: format()
Example 1:
print("Mohammed has {} balloons".format(27))
Mohammed has 27 balloons

Example 2:
animal = "dog"
action = "bite"
print("Does your {} {}?".format(animal, action))
Does your dog bite?

Example 3:
maria_string = "Maria loves {} and {}"
print(maria_string.format("math", "statistics"))
Maria loves math and statistics

Example 4:
name = "Ashish"
print(f"My name is {name}")
My name is Ashish

Another important string method: split()
A helpful string method when working with strings is the .split method. This 
function or method returns a data container called a list that contains the 
words from the input string. 

The split method has two additional arguments (sep and maxsplit). The sep argument 
stands for "separator". It can be used to identify how the string should be split 
up (e.g., whitespace characters like space, tab, return, newline; specific 
punctuation (e.g., comma, dashes)). If the sep argument is not provided, 
the default separator is whitespace.

True to its name, the maxsplit argument provides the maximum number of splits. 
The argument gives maxsplit + 1 number of elements in the new list, with the 
remaining string being returned as the last element in the list.

Understanding Common Error Messages
There are many different error messages that you can receive in Python, and 
learning how to interpret what they're telling you can be very helpful. 
Here are some common ones for starters:

"ZeroDivisionError: division by zero."

"SyntaxError: unexpected EOF while parsing" 
Executing these lines produces this syntax error message - do you see why?
greeting = "hello"
print(greeting.upper
This message is often produced when you have accidentally left out something, 
like a parenthesis. The message is saying it has unexpectedly reached the end of 
file ("EOF") and it still didn't find that right parenthesis. This can easily 
happen with code syntax involving pairs, like beginning and ending quotes also.

"TypeError: len() takes exactly one argument (0 given)" This kind of message 
could be given for many functions, like len in this case, if I accidentally do 
not include the required number of arguments when I'm calling a function, as below.
This message tells me how many arguments the function requires (one in this case),
compared with how many I gave it (0). I meant to use len(chars) to count the 
number of characters in this long word, but I forgot the argument.
chars = "supercalifragilisticexpialidocious"
len()


Search for Your Error Message
Software developers like to share their problems and solutions with each other 
on the web, so using Google search, or searching in StackOverflow, 

Use Print Statements to Help Debugging
Adding print statements temporarily into your code can help you see which code 
lines have been executed before the error occurs, and see the values of any 
variables that might be important. This approach to debugging can also be 
helpful even if you're not receiving an error message, but things just 
aren't working the way you want.

DATA STRUCTURES:
---------------
* Types of Data Structures: Lists, Tuples, Sets, Dictionaries, 
							Compound Data Structures
* Operators: Membership, Identity
* Built-In Functions or Methods

+ MUTABILITY : WHETHER AN OBJECT CAN CHANGE ITS VALUES AFTER IT HAS BEEN CREATED
+ ORDER : WHETHER THE ORDER OF ELEMENTS IN AN OBJECT MATTERS (AND WHETHER THIS CAN
		  BE USED TO ACCESS ELEMENTS)

List : 
+ A data structure in python that is mutable ordered sequence of elements
+ Lists are ordered i.e. we can look up for specific element by their index
+ We can pull more than one value from a list at a time by using slicing. 
  When using slicing, it is important to remember that the lower index is 
  inclusive and the upper index is exclusive
+ We can use IN and NOT IN to return a bool of whether an element exists within 
  our list,  or if one string is a substring of another  
+ Strings are sequences of letters where as lists can be sequence of any types of
  object (string, int, float, etc)
+ Lists can be modified but strings cannot (look below)
+ Strings are immutable where lists are mutable
+ Both strings and lists are ordered which is why indexing works for both
  

